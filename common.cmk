#
# Copyright (c) 2013, Xin YUAN, courses of Zhejiang University
# All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the 2-Clause BSD License.
#
# Author contact information:
#   yxxinyuan@zju.edu.cn
#

#string of compile flags

#all warnings

SET(STRING_C_FLAGS "")
IF(WIN32)
	#Windows, Unicode
	SET(STRING_C_FLAGS "${STRING_C_FLAGS} -D_UNICODE /W3")
	#Using UTF8 strings (char*) in assemblies
	SET(STRING_C_FLAGS "${STRING_C_FLAGS} /execution-charset:utf-8")
ELSE(WIN32)
	#Linux, hide all functions
	SET(STRING_C_FLAGS "${STRING_C_FLAGS} -Wall -D_FILE_OFFSET_BITS=64 -fvisibility=hidden")
ENDIF(WIN32)

#CPP flags
SET(STRING_CXX_FLAGS "")
IF(WIN32)
	#disable RTTI
	SET(STRING_CXX_FLAGS "${STRING_C_FLAGS} /GR-")
ELSE(WIN32)
	#disable RTTI
	SET(STRING_CXX_FLAGS "${STRING_C_FLAGS} -fno-rtti")
ENDIF(WIN32)

SET(STRING_CPP_VERSION "")
IF(WIN32)
ELSE(WIN32)
	SET(STRING_CPP_VERSION "${STRING_CPP_VERSION} -std=c++11")
ENDIF(WIN32)

SET(STRING_CXX_FLAGS "${STRING_CXX_FLAGS} ${STRING_CPP_VERSION}")

#source files as UTF8 encoding

MACRO(SET_SOURCE_FILES_UTF8)
	IF(WIN32)
		ADD_DEFINITIONS("/source-charset:utf-8")
	ENDIF(WIN32)
ENDMACRO(SET_SOURCE_FILES_UTF8)

#set target type

#targetType: "shared" or "exe"
#Tis macro will add SHARED_LIBRARY macro to shared library target while SET_PCH is not called
MACRO(SET_TARGET_TYPE targetType)
	STRING(COMPARE EQUAL ${targetType} "shared" IsShared)
	IF(${IsShared})
		ADD_DEFINITIONS("-DSHARED_LIBRARY")
	ENDIF(${IsShared})
ENDMACRO(SET_TARGET_TYPE)

#string of link flags

SET(STRING_LINK_FLAGS_TARGET "")
SET(STRING_LINK_FLAGS_TARGET_SAVED "")

#macro of set sub-system
#strSubSystem: Foreground or Background
#In Windows, Foreground is CONSOLE, Background is WINDOWS
MACRO(SET_TARGET_SUBSYSTEM strSubSystem)
	#Windows, set sub-system
	IF(WIN32)
		STRING(COMPARE EQUAL ${strSubSystem} "Foreground" IsFore)
		IF(IsFore)
			SET(strSub CONSOLE)
		ELSE(IsFore)
			SET(strSub WINDOWS)
		ENDIF(IsFore)
		SET(STRING_LINK_FLAGS_TARGET
			"${STRING_LINK_FLAGS_TARGET_SAVED} /SUBSYSTEM:${strSub}")
	ENDIF(WIN32)
ENDMACRO(SET_TARGET_SUBSYSTEM)

SET(STRING_LINK_EXTRA_LIBS "")
SET(STRING_LINK_EXTRA_LIBS_SAVED "")
IF(WIN32)
#Windows
ELSE(WIN32)
#Linux
	SET(STRING_LINK_EXTRA_LIBS_SAVED
		${STRING_LINK_EXTRA_LIBS_SAVED} dl pthread uuid rt)
ENDIF(WIN32)
SET(STRING_LINK_EXTRA_LIBS ${STRING_LINK_EXTRA_LIBS_SAVED})

#Macro of Precompiled Header

#Precompiled Header in Windows
MACRO(WIN32_SET_PCH IsShared pchHeader pchSource)
	GET_FILENAME_COMPONENT(pchBaseName ${pchHeader} NAME_WE)
	#get pch filename
	SET(pchBinary
		"${CMAKE_CURRENT_BINARY_DIR}/${pchBaseName}.pch")
	#set compile flags for creating pch
	SET(src_compile_flags "/Fp\"${pchBinary}\"")
	#check the shared library
	IF(${IsShared})
		SET(src_compile_flags
			"/D \"SHARED_LIBRARY\" ${src_compile_flags}")
	ENDIF(${IsShared})
	#set source files
	SET_SOURCE_FILES_PROPERTIES(${pchSource} PROPERTIES
		COMPILE_FLAGS
			"/Yc\"${pchHeader}\" ${src_compile_flags}"
		OBJECT_OUTPUTS "${pchBinary}")
	SET(Sources ${USE_PCH_SOURCES})
	MESSAGE("using pch: ${pchBinary} for ${Sources}")
	#set compile flags for using pch
	SET_SOURCE_FILES_PROPERTIES(${Sources} PROPERTIES
		COMPILE_FLAGS
			"/Yu\"${pchBinary}\" /FI\"${pchBinary}\" ${src_compile_flags}"
		OBJECT_DEPENDS "${pchBinary}")
ENDMACRO(WIN32_SET_PCH)

#Precompiled Header in Linux
MACRO(UNIX_SET_PCH targetName IsShared pchHeader pchSource)
	SET(_compile_FLAGS ${CMAKE_CXX_FLAGS})
	SET(_input "${CMAKE_CURRENT_SOURCE_DIR}/include/${pchHeader}")
	MESSAGE("creating pch: ${_input}")
	GET_FILENAME_COMPONENT(_name ${_input} NAME)
	GET_FILENAME_COMPONENT(_path ${_input} PATH)
	#generate the pch filename
	SET(_outdir "${CMAKE_CURRENT_BINARY_DIR}/${_name}.gch")
	IF(CMAKE_BUILD_TYPE)
		SET(_output "${_outdir}/${CMAKE_BUILD_TYPE}.c++")
		STRING(TOUPPER ${CMAKE_BUILD_TYPE} _bt_name)
		LIST(APPEND _compile_FLAGS
			${CMAKE_CXX_FLAGS_${_bt_name}})
	ELSE(CMAKE_BUILD_TYPE)
		SET(_output "${_outdir}/default.c++")
	ENDIF(CMAKE_BUILD_TYPE)
	#create a directory for storing the pch file
	ADD_CUSTOM_COMMAND(OUTPUT ${_outdir}
		COMMAND mkdir ${_outdir})
	GET_DIRECTORY_PROPERTY(_directory_flags INCLUDE_DIRECTORIES)
	#pch directory must appear before all other including directories
	SET(_CMAKE_CURRENT_BINARY_DIR_included_before_path FALSE)
	FOREACH(item ${_directory_flags})
		IF(${item} STREQUAL ${_path} AND NOT
			_CMAKE_CURRENT_BINARY_DIR_included_before_path)
			MESSAGE(FATAL_ERROR
				"This is the CREATE_PCH macro. "
				"CMAKE_CURRENT_BINARY_DIR has to mentioned at "
				"INCLUDE_DIRECTORIES's argument list before "
				"${_path}, where ${_name} is located")
		ENDIF(${item} STREQUAL ${_path} AND NOT
			_CMAKE_CURRENT_BINARY_DIR_included_before_path)
		IF(${item} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
			SET(_CMAKE_CURRENT_BINARY_DIR_included_before_path TRUE)
		ENDIF(${item} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
		LIST(APPEND _compile_FLAGS "-I\"${item}\"")
	ENDFOREACH(item)
	#additional compile flags from ADD_DEFINITIONS()
	LIST(APPEND _compile_FLAGS ${STRING_CXX_FLAGS})
	#check shared library
	IF(${IsShared})
		LIST(APPEND _compile_FLAGS "-fPIC")
		LIST(APPEND _compile_FLAGS "-DSHARED_LIBRARY")
	ENDIF(${IsShared})
	SEPARATE_ARGUMENTS(_compile_FLAGS)
	MESSAGE("_compiler_FLAGS: ${_compile_FLAGS}")
	#copy header files to building directory
	ADD_CUSTOM_COMMAND(
		OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${_name}
		COMMAND ${CMAKE_COMMAND} -E copy ${_input}
			${CMAKE_CURRENT_BINARY_DIR}/${_name}
		DEPENDS ${_input})
	#Generate PCH
	ADD_CUSTOM_COMMAND(OUTPUT ${_output}
		COMMAND ${CMAKE_CXX_COMPILER} ${_compile_FLAGS}
			-x c++-header -o ${_output} ${_input}
		DEPENDS ${_input} ${_outdir}
			${CMAKE_CURRENT_BINARY_DIR}/${_name})
	ADD_CUSTOM_TARGET(${targetName}_gch DEPENDS ${_output})
	ADD_DEPENDENCIES(${targetName} ${targetName}_gch)
	#Use PCH by -include
	SET(Sources ${USE_PCH_SOURCES})
	SET(src_compile_flags "-include ${_name} -Winvalid-pch")
	#shared library
	IF(${IsShared})
		SET(src_compile_flags
			"${src_compile_flags} -DSHARED_LIBRARY")
	ENDIF(${IsShared})
	#set source files
	FOREACH(source ${Sources})
		SET_SOURCE_FILES_PROPERTIES(${source} PROPERTIES
			COMPILE_FLAGS "${src_compile_flags}"
			OBJECT_DEPENDS "${_output}")
	ENDFOREACH(source)
	#set pch source file
	SET_SOURCE_FILES_PROPERTIES(${pchSource} PROPERTIES
		COMPILE_FLAGS "${src_compile_flags}"
		OBJECT_DEPENDS "${_output}")
ENDMACRO(UNIX_SET_PCH)

#Set Precompiled Header
#targetName: target name
#targetType: "shared" or "exe"
#pchHeader, pchSource: header file and source file for pch
#SourceList: a list for source files using pch
MACRO(SET_PCH targetName targetType pchHeader pchSource SourceList)
	SET(USE_PCH_SOURCES "${ARGN}")
	LIST(APPEND USE_PCH_SOURCES ${SourceList})
	STRING(COMPARE EQUAL ${targetType} "shared" IsShared)
	IF(WIN32)
		WIN32_SET_PCH(${IsShared} ${pchHeader} ${pchSource})
	ENDIF(WIN32)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		UNIX_SET_PCH(${targetName} ${IsShared}
			${pchHeader} ${pchSource})
	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDMACRO(SET_PCH)

# since 3.16, you can use TARGET_PRECOMPILE_HEADERS(...)

#Set additional target command
MACRO(SET_TARGET_CMD targetName isPostBuilding strCmd)
	IF(WIN32)
		IF(${isPostBuilding})
			ADD_CUSTOM_COMMAND(TARGET ${targetName} POST_BUILD
								COMMAND ${strCmd} ARGS ${ARGN}
								) # VERBATIM)
		ELSE(${isPostBuilding})
			ADD_CUSTOM_COMMAND(TARGET ${targetName} PRE_BUILD
								COMMAND ${strCmd} ARGS ${ARGN}
								) # VERBATIM)
		ENDIF(${isPostBuilding})
	ENDIF(WIN32)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		IF(${isPostBuilding})
			ADD_CUSTOM_COMMAND(TARGET ${targetName} POST_BUILD
								COMMAND ${strCmd} ARGS ${ARGN}
								)
		ELSE(${isPostBuilding})
			ADD_CUSTOM_COMMAND(TARGET ${targetName} PRE_BUILD
								COMMAND ${strCmd} ARGS ${ARGN}
								)
		ENDIF(${isPostBuilding})
	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDMACRO(SET_TARGET_CMD)

#mkdir
MACRO(SET_TARGET_MKDIR targetName isPostBuilding strDir)
	SET(_source "${strDir}")
	IF(WIN32)
		STRING(REPLACE "/" "\\\\" _source ${_source})
	ENDIF(WIN32)
	IF(WIN32)
		SET_TARGET_CMD(${targetName} ${isPostBuilding} dir /a ${_source} "1>nul" "2>nul" "||" mkdir ${_source})
	ELSE(WIN32)
		SET_TARGET_CMD(${targetName} ${isPostBuilding} mkdir -p ${_source})
	ENDIF(WIN32)
ENDMACRO(SET_TARGET_MKDIR)

#Source : the source string
#Dest : the dest string
MACRO(SET_TARGET_COPY targetName isPostBuilding Source Dest)
	SET(_source "${Source}")
	SET(_dest "${Dest}")

	IF(WIN32)
		STRING(REPLACE "/" "\\\\" _source ${_source})
		STRING(REPLACE "/" "\\\\" _dest ${_dest})
	ENDIF(WIN32)

	IF(WIN32)
		SET_TARGET_CMD(${targetName} ${isPostBuilding} copy "/Y" "/L" "${_source}" "${_dest}")
	ENDIF(WIN32)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		SET_TARGET_CMD(${targetName} ${isPostBuilding} cp -pdf ${_source} ${_dest})
	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDMACRO(SET_TARGET_COPY)

MACRO(SET_TARGET_COPYDIR targetName isPostBuilding Source Dest)
	SET(_source "${Source}")
	SET(_dest "${Dest}")

	IF(WIN32)
		STRING(REPLACE "/" "\\\\" _source ${_source})
		STRING(REPLACE "/" "\\\\" _dest ${_dest})
	ENDIF(WIN32)

	IF(WIN32)
		SET_TARGET_CMD(${targetName} ${isPostBuilding} xcopy "/Q" "/Y" "/E" ${_source} ${_dest})
	ENDIF(WIN32)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		SET_TARGET_CMD(${targetName} ${isPostBuilding} cp -r ${_source} ${_dest})
	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDMACRO(SET_TARGET_COPYDIR)

# string

#set the actual path of output-path to OUTPUT_ACTUAL_PATH
MACRO(SET_OUTPUT_ACTUAL_PATH output_path)
	SET(OUTPUT_ACTUAL_PATH "${output_path}")
	IF(WIN32)
		SET(OUTPUT_ACTUAL_PATH "${OUTPUT_ACTUAL_PATH}/$<CONFIG>")
	ELSE(WIN32)
	ENDIF(WIN32)
ENDMACRO(SET_OUTPUT_ACTUAL_PATH)

#set the parent path of output-path to OUTPUT_PARENT_PATH
MACRO(SET_OUTPUT_PARENT_PATH output_path)
	SET(OUTPUT_PARENT_PATH "${output_path}")
	IF(WIN32)
	ELSE(WIN32)
		STRING(LENGTH ${OUTPUT_PARENT_PATH} _str_len)
		STRING(FIND ${OUTPUT_PARENT_PATH} "/" _str_pos REVERSE)
		MATH(EXPR _str_len "${_str_len} - ${_str_pos}")
		STRING(SUBSTRING ${OUTPUT_PARENT_PATH} 0 ${_str_pos} OUTPUT_PARENT_PATH)
	ENDIF(WIN32)
ENDMACRO(SET_OUTPUT_PARENT_PATH)

#check building system
MACRO(CHECK_BUILDING_SYSTEM)
	IF(WIN32)
		IF(MSVC)
		ELSE()
			MESSAGE(FATAL_ERROR "MSVC should be used for compiling!")
		ENDIF()
	ELSEIF(UNIX)
		IF(CMAKE_COMPILER_IS_GNUCXX)
		ELSE()
			MESSAGE(FATAL_ERROR "g++ should be used for compiling!")
		ENDIF()
	ELSE()
		MESSAGE(FATAL_ERROR "This OS system is not supported!")
	ENDIF()
ENDMACRO()

#check the building directory
MACRO(CHECK_BUILDING_DIR)
	IF("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
		MESSAGE(FATAL_ERROR "Do not build in-source.\nPlease remove CMakeCache.txt and the CMakeFiles/ directory.")
	ENDIF()
ENDMACRO(CHECK_BUILDING_DIR)

#end
