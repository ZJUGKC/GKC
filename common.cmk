#
# Copyright (c) 2013, Xin YUAN, courses of Zhejiang University
# All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the 2-Clause BSD License.
#
# Author contact information:
#   yxxinyuan@zju.edu.cn
#

#string of compile flags

#all warnings
SET(STRING_CXX_FLAGS "")

IF(WIN32)
	#Windows, Unicode and disable RTTI
	SET(STRING_CXX_FLAGS "${STRING_CXX_FLAGS} -D_UNICODE /GR-")
ELSE(WIN32)
	#Linux, hide all functions and disable RTTI
	SET(STRING_CXX_FLAGS
		"${STRING_CXX_FLAGS} -Wall -D_FILE_OFFSET_BITS=64 -fvisibility=hidden -fno-rtti -std=c++11")
ENDIF(WIN32)

ADD_DEFINITIONS(${STRING_CXX_FLAGS})

#string of link flags

SET(STRING_LINK_FLAGS_TARGET "")
SET(STRING_LINK_FLAGS_TARGET_SAVED "")

#macro of set sub-system
#strSubSystem: Foreground or Background
#In Windows, Foreground is CONSOLE, Background is WINDOWS
MACRO(SET_TARGET_SUBSYSTEM strSubSystem)
	#Windows, set sub-system
	IF(WIN32)
		STRING(COMPARE EQUAL ${strSubSystem} "Foreground" IsFore)
		IF(IsFore)
			SET(strSub CONSOLE)
		ELSE(IsFore)
			SET(strSub WINDOWS)
		ENDIF(IsFore)
		SET(STRING_LINK_FLAGS_TARGET
			"${STRING_LINK_FLAGS_TARGET_SAVED} /SUBSYSTEM:${strSub}")
	ENDIF(WIN32)
	#Linux, set x64 flags
	IF(CMAKE_COMPILER_IS_GNUCXX)
		IF(USE_64BITS)
			SET(strSub "-m64")
		ELSE(USE_64BITS)
			SET(strSub "-m32")
		ENDIF(USE_64BITS)
		SET(STRING_LINK_FLAGS_TARGET
			"${STRING_LINK_FLAGS_TARGET_SAVED} ${strSub}")
	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDMACRO(SET_TARGET_SUBSYSTEM)

SET(STRING_LINK_EXTRA_LIBS "")
SET(STRING_LINK_EXTRA_LIBS_SAVED "")
IF(WIN32)
#Windows
ELSE(WIN32)
#Linux
	SET(STRING_LINK_EXTRA_LIBS_SAVED
		${STRING_LINK_EXTRA_LIBS_SAVED} dl pthread uuid X11)
ENDIF(WIN32)
SET(STRING_LINK_EXTRA_LIBS ${STRING_LINK_EXTRA_LIBS_SAVED})

#macro of set extra-libs
MACRO(SET_LINK_EXTRA_LIBS LibList)
	SET(libs ${ARGN})
	LIST(APPEND libs ${LibList})
	SET(STRING_LINK_EXTRA_LIBS ${STRING_LINK_EXTRA_LIBS_SAVED})
	FOREACH(libname ${libs})
		IF(WIN32)
			SET(libname "${libname}.lib")
		ENDIF(WIN32)
		LIST(APPEND STRING_LINK_EXTRA_LIBS ${libname})
	ENDFOREACH(libname)
ENDMACRO(SET_LINK_EXTRA_LIBS)

#Macro of Precompiled Header

#Precompiled Header in Windows
MACRO(WIN32_SET_PCH IsShared pchHeader pchSource)
	GET_FILENAME_COMPONENT(pchBaseName ${pchHeader} NAME_WE)
	#get pch filename
	SET(pchBinary
		"${CMAKE_CURRENT_BINARY_DIR}/${pchBaseName}.pch")
	#set compile flags for creating pch
	SET(src_compile_flags "/Fp\"${pchBinary}\"")
	#check the shared library
	IF(${IsShared})
		SET(src_compile_flags
			"/D \"SHARED_LIBRARY\" ${src_compile_flags}")
	ENDIF(${IsShared})
	#set source files
	SET_SOURCE_FILES_PROPERTIES(${pchSource} PROPERTIES
		COMPILE_FLAGS
			"/Yc\"${pchHeader}\" ${src_compile_flags}"
		OBJECT_OUTPUTS "${pchBinary}")
	SET(Sources ${USE_PCH_SOURCES})
	MESSAGE("using pch: ${pchBinary} for ${Sources}")
	#set compile flags for using pch
	SET_SOURCE_FILES_PROPERTIES(${Sources} PROPERTIES
		COMPILE_FLAGS
			"/Yu\"${pchBinary}\" /FI\"${pchBinary}\" ${src_compile_flags}"
		OBJECT_DEPENDS "${pchBinary}")
ENDMACRO(WIN32_SET_PCH)

#Precompiled Header in Linux
MACRO(UNIX_SET_PCH targetName IsShared pchHeader pchSource)
	SET(_compile_FLAGS ${CMAKE_CXX_FLAGS})
	SET(_input "${CMAKE_CURRENT_SOURCE_DIR}/include/${pchHeader}")
	MESSAGE("creating pch: ${_input}")
	GET_FILENAME_COMPONENT(_name ${_input} NAME)
	GET_FILENAME_COMPONENT(_path ${_input} PATH)
	#generate the pch filename
	SET(_outdir "${CMAKE_CURRENT_BINARY_DIR}/${_name}.gch")
	IF(CMAKE_BUILD_TYPE)
		SET(_output "${_outdir}/${CMAKE_BUILD_TYPE}.c++")
		STRING(TOUPPER ${CMAKE_BUILD_TYPE} _bt_name)
		LIST(APPEND _compile_FLAGS
			${CMAKE_CXX_FLAGS_${_bt_name}})
	ELSE(CMAKE_BUILD_TYPE)
		SET(_output "${_outdir}/default.c++")
	ENDIF(CMAKE_BUILD_TYPE)
	#create a directory for storing the pch file
	ADD_CUSTOM_COMMAND(OUTPUT ${_outdir}
		COMMAND mkdir ${_outdir})
	GET_DIRECTORY_PROPERTY(_directory_flags INCLUDE_DIRECTORIES)
	#pch directory must appear before all other including directories
	SET(_CMAKE_CURRENT_BINARY_DIR_included_before_path FALSE)
	FOREACH(item ${_directory_flags})
		IF(${item} STREQUAL ${_path} AND NOT
			_CMAKE_CURRENT_BINARY_DIR_included_before_path)
			MESSAGE(FATAL_ERROR
				"This is the CREATE_PCH macro. "
				"CMAKE_CURRENT_BINARY_DIR has to mentioned at "
				"INCLUDE_DIRECTORIES's argument list before "
				"${_path}, where ${_name} is located")
		ENDIF(${item} STREQUAL ${_path} AND NOT
			_CMAKE_CURRENT_BINARY_DIR_included_before_path)
		IF(${item} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
			SET(_CMAKE_CURRENT_BINARY_DIR_included_before_path TRUE)
		ENDIF(${item} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
		LIST(APPEND _compile_FLAGS "-I\"${item}\"")
	ENDFOREACH(item)
	#additional compile flags from ADD_DEFINITIONS()
	LIST(APPEND _compile_FLAGS ${STRING_CXX_FLAGS})
	#check x64 platform
	IF(USE_64BITS)
		LIST(APPEND _compile_FLAGS "-m64")
		LIST(APPEND _compile_FLAGS "-DCM_X64")
	ELSE(USE_64BITS)
		LIST(APPEND _compile_FLAGS "-m32")
		LIST(APPEND _compile_FLAGS "-DCM_X86")
	ENDIF(USE_64BITS)
	#check shared library
	IF(${IsShared})
		LIST(APPEND _compile_FLAGS "-fPIC")
		LIST(APPEND _compile_FLAGS "-DSHARED_LIBRARY")
	ENDIF(${IsShared})
	SEPARATE_ARGUMENTS(_compile_FLAGS)
	MESSAGE("_compiler_FLAGS: ${_compile_FLAGS}")
	#copy header files to building directory
	ADD_CUSTOM_COMMAND(
		OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${_name}
		COMMAND ${CMAKE_COMMAND} -E copy ${_input}
			${CMAKE_CURRENT_BINARY_DIR}/${_name})
	#Generate PCH
	ADD_CUSTOM_COMMAND(OUTPUT ${_output}
		COMMAND ${CMAKE_CXX_COMPILER} ${_compile_FLAGS}
			-x c++-header -o ${_output} ${_input}
		DEPENDS ${_input} ${_outdir}
			${CMAKE_CURRENT_BINARY_DIR}/${_name})
	ADD_CUSTOM_TARGET(${targetName}_gch DEPENDS ${_output})
	ADD_DEPENDENCIES(${targetName} ${targetName}_gch)
	#Use PCH by -include
	SET(Sources ${USE_PCH_SOURCES})
	SET(src_compile_flags "-include ${_name} -Winvalid-pch")
	#x64
	IF(USE_64BITS)
		SET(src_compile_flags "${src_compile_flags} -m64 -DCM_X64")
	ELSE(USE_64BITS)
		SET(src_compile_flags "${src_compile_flags} -m32 -DCM_X86")
	ENDIF(USE_64BITS)
	#shared library
	IF(${IsShared})
		SET(src_compile_flags
			"${src_compile_flags} -DSHARED_LIBRARY")
	ENDIF(${IsShared})
	#set source files
	FOREACH(source ${Sources})
		SET_SOURCE_FILES_PROPERTIES(${source} PROPERTIES
			COMPILE_FLAGS "${src_compile_flags}"
			OBJECT_DEPENDS "${_output}")
	ENDFOREACH(source)
	#set pch source file
	SET_SOURCE_FILES_PROPERTIES(${pchSource} PROPERTIES
		COMPILE_FLAGS "${src_compile_flags}"
		OBJECT_DEPENDS "${_output}")
ENDMACRO(UNIX_SET_PCH)

#Set Precompiled Header
#targetName: target name
#targetType: "shared" or "exe"
#pchHeader, pchSource: header file and source file for pch
#SourceList: a list for source files using pch
MACRO(SET_PCH targetName targetType pchHeader pchSource SourceList)
	SET(USE_PCH_SOURCES "${ARGN}")
	LIST(APPEND USE_PCH_SOURCES ${SourceList})
	STRING(COMPARE EQUAL ${targetType} "shared" IsShared)
	IF(WIN32)
		WIN32_SET_PCH(${IsShared} ${pchHeader} ${pchSource})
	ENDIF(WIN32)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		UNIX_SET_PCH(${targetName} ${IsShared}
			${pchHeader} ${pchSource})
	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDMACRO(SET_PCH)

#Set post-building copy command
#Source : the source string
#Dest : the dest string
MACRO(SET_POSTBUILD_COPY targetName Source Dest)
	IF(WIN32)
		ADD_CUSTOM_COMMAND(TARGET ${targetName} POST_BUILD
							COMMAND copy ARGS "/Y" "/L" "${Source}" "${Dest}"
							VERBATIM)
	ENDIF(WIN32)
	IF(CMAKE_COMPILER_IS_GNUCXX)
		ADD_CUSTOM_COMMAND(TARGET ${targetName} POST_BUILD
							COMMAND cp ARGS -pdf ${Source} ${Dest}
							)
	ENDIF(CMAKE_COMPILER_IS_GNUCXX)
ENDMACRO(SET_POSTBUILD_COPY)

# strNeedPlatform: "platform" or "no-platform"
# strNeedMachine:  "machine" or "no-machine"
# strNeedConfig:   "config", "no-config" or "user-config"
# strConfig: user config name, "", "Debug" or "Release"
# output: POSTBUILD_SRC_PATH
MACRO(SET_POSTBUILD_SRC_PATH strNeedPlatform strNeedMachine strNeedConfig strConfig SourcePath)
	SET(POSTBUILD_SRC_PATH "${SourcePath}")
	IF(${strNeedPlatform} STREQUAL "platform")
		IF(WIN32)
			SET(POSTBUILD_SRC_PATH "${POSTBUILD_SRC_PATH}/windows")
		ENDIF(WIN32)
		IF(CMAKE_COMPILER_IS_GNUCXX)
			SET(POSTBUILD_SRC_PATH "${POSTBUILD_SRC_PATH}/linux")
		ENDIF(CMAKE_COMPILER_IS_GNUCXX)
	ENDIF(${strNeedPlatform} STREQUAL "platform")
	IF(${strNeedMachine} STREQUAL "machine")
		IF(USE_64BITS)
			SET(POSTBUILD_SRC_PATH "${POSTBUILD_SRC_PATH}/x64")
		ELSE(USE_64BITS)
			SET(POSTBUILD_SRC_PATH "${POSTBUILD_SRC_PATH}/x86")
		ENDIF(USE_64BITS)
	ENDIF(${strNeedMachine} STREQUAL "machine")
	IF(WIN32)
		IF(${strNeedConfig} STREQUAL "config")
			SET(POSTBUILD_SRC_PATH "${POSTBUILD_SRC_PATH}/$<CONFIG>")
		ELSEIF(${strNeedConfig} STREQUAL "user-config")
			SET(POSTBUILD_SRC_PATH "${POSTBUILD_SRC_PATH}/${strConfig}")
		ELSE(${strNeedConfig} STREQUAL "config")
		ENDIF(${strNeedConfig} STREQUAL "config")
	ENDIF(WIN32)
ENDMACRO(SET_POSTBUILD_SRC_PATH)

# strSrcNeedConfig: "config" or "no-config"
# strDestNeedConfig: "config" or "no-config"
MACRO(SET_POSTBUILD_PATH_COPY targetName strNeedPlatform strNeedMachine strSrcNeedConfig strDestNeedConfig SourcePath Source Dest)
	SET_POSTBUILD_SRC_PATH(${strNeedPlatform} ${strNeedMachine} ${strSrcNeedConfig} "" ${SourcePath})
	SET(_source "${POSTBUILD_SRC_PATH}/${Source}")
	SET_POSTBUILD_SRC_PATH("no-platform" "no-machine" ${strDestNeedConfig} "" ${Dest})
	SET(_dest "${POSTBUILD_SRC_PATH}")

	IF(WIN32)
		STRING(REPLACE "/" "\\\\" _source ${_source})
		STRING(REPLACE "/" "\\\\" _dest ${_dest})
	ENDIF(WIN32)

	SET_POSTBUILD_COPY(${targetName} ${_source} ${_dest})
ENDMACRO(SET_POSTBUILD_PATH_COPY)

#check the building directory
MACRO(CHECK_BUILDING_DIR)
	IF("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
		MESSAGE(FATAL_ERROR "Do not build in-source.\nPlease remove CMakeCache.txt and the CMakeFiles/ directory.")
	ENDIF()
ENDMACRO(CHECK_BUILDING_DIR)

#end
